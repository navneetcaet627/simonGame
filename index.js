var level = 16;
var timeIncrement = 500;
var gameObj = new GameObj(0,false,new Array(),new Array(), false);

function GameObj(level, isGameOn, pattern, userPattern, isNextLevel){
  this.level       = level; //Determines the level at which the user is playing
  this.isGameOn    = isGameOn; //Determines whether the game is ON or not
  this.pattern     = pattern; //Stores the pattern generated by the computer as per the current level
  this.userPattern = userPattern; //Stores the pattern enetered by the user
  this.isNextLevel = isNextLevel; //Determines whether the user is starting from level 1 or is proceding to next level after passing the previous level
}

function setNextGameLevel(level){
  gameObj = new GameObj(level, true, new Array(),new Array(), true);
  //alert("Game Level : "+gameObj.level+" Game is On :"+gameObj.isGameOn+" Game Array : "+gameObj.userPattern);
  handleKeypress(gameObj);
}

function getUserInputPattern(){
  $(".btn").click(function(event){
      gameObj.userPattern.push(event.target.id);
      playButton(event.target.id);
      checkGameStatus(gameObj.userPattern,gameObj.pattern);
  });
}

function checkGameStatus(userPattern, pattern){
  if(userPattern.length == pattern.length){
    if(comparePatterns(userPattern, pattern)){
      playSound("next");
      $("h1").text("Level Crossed - Moving to Level: "+(gameObj.level +1));
      setTimeout(function(){
        setNextGameLevel(gameObj.level +1);
      },2000);
    }else{
      endGame();
    }
  }else if(userPattern.length < pattern.length){
    if(!comparePatterns(userPattern,pattern)){
      endGame();
    }
  }
}

function endGame(){
  playSound("wrong");
  $("h1").text("Wrong input sequence - Restarting the game");
  setTimeout(function(){
    location.reload();
  },2000);
}

function comparePatterns(userPattern, pattern){
  var count = 0;
  var isEqual = false;
  if(userPattern.length < pattern.length){
    count = userPattern.length;
  }else{
    count = pattern.length;
  }
  for(var i= 0; i< count; i++){
      if(userPattern[i] == pattern[i]){
        isEqual = true;
      }else{
        isEqual = false;
      }
  }
  return isEqual;
}

$(document).keypress(function(event){
    handleKeypress(gameObj);
});

function handleKeypress(gameObj){
  if (!gameObj.isGameOn){
    gameObj.level = 1;
    gameObj.isGameOn = true;
    $("h1").text("Level "+gameObj.level);
    generatePattern(gameObj.level);
    playCurrentSequence();
    getUserInputPattern();
  }else if (gameObj.isGameOn && gameObj.level == 16){
    gameObj.level = 0;
    gameObj.isGameOn =  false;
    $("h1").text("Game Over You Crossed all the Levels Press Any Key to restart");
  }
  else{
    if(!gameObj.isNextLevel){
      gameObj.level = gameObj.level + 1 ;
    }
    $("h1").text("Level "+gameObj.level)
    generatePattern(gameObj.level);
    playCurrentSequence();
  }
}

function generatePattern(level){
  var pattern = [];
  while (level > 0){
    var btn = Math.floor(Math.random() * 4) + 1;
    var btnId = "";
    if(btn == 1){
      btnId = "green";
    }else if (btn == 2) {
      btnId = "red";
    }else if (btn == 3) {
      btnId = "yellow";
    }else if (btn == 4) {
      btnId = "blue";
    }else{
      console.log("There was some problem in generating the patern");
    }
    pattern.push(btnId);
    level--;
  }
  gameObj.pattern = pattern;
  $(document).unbind("keypress");
}

function playCurrentSequence(){
  timeInt = 300;
  pattern = gameObj.pattern;
  for (let i=0; i< pattern.length; i++){
    setTimeout(function(){
      playButton(pattern[i]);
    },timeInt);
    timeInt = timeInt + timeIncrement;
  }
}

function playButton(btn){
  var activeBtn = $("#"+btn);
  activeBtn.addClass("pressed");
  setTimeout(function(){
    playSound(btn);
    activeBtn.removeClass("pressed");
  },100);
}

function playSound(btnId){
  var src = "sounds/"+btnId+".mp3";
  var audio = new Audio(src);
  audio.play();
}
